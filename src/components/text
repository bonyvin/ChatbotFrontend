const updateItemDetails = useCallback(
    (invoiceDatafromConversation) => {
      if (
        !invoiceDatafromConversation ||
        Object.keys(invoiceDatafromConversation).length === 0
      ) {
        // value.setItemDetails({
        //   items: "",
        //   quantity: "",
        //   invoiceCost: "",
        // });
        return;
      }
      const {
        "Item ID": itemId = "", 
        Quantity: itemQuantity = "", 
        "Item Description": itemDescription = "", 
        "Cost per Unit": itemCost = "" ,
      } = invoiceDatafromConversation;
      console.log("updateitemdetails invdfc: ", itemId,itemQuantity, itemCost);
      const itemsArray = Array.isArray(itemId)
        ? itemId
        : itemId.split(", ").map((item) => item.trim());
      const quantitiesArray = Array.isArray(itemQuantity)
        ? itemQuantity
        : itemQuantity.split(", ").map((qty) => parseInt(qty.trim(), 10));
      const itemCostArray = Array.isArray(itemCost)
        ? itemCost
        : itemCost
            .split(", ")
            .map((invCost) => parseInt(invCost.trim(), 10));
      const itemDescArray = Array.isArray(itemDescription)
        ? itemDescription
        : itemDescription
            .split(", ")
            .map((invCost) => parseInt(invCost.trim(), 10));

      const tempDictionary = itemsArray.reduce((acc, item, index) => {
        acc[item] = {
          itemQuantity: quantitiesArray[index] || 0,
          itemCost: itemCostArray[index] || 0,
          itemDescription:itemDescArray[index] || 0
        };
        return acc;
      }, {});
      setItemsArray(itemsArray);
      setQuantitiesArray(quantitiesArray);
      setInvoiceCostArray(itemCostArray);
      const updatedInvoiceData = { itemId, itemQuantity, itemCost,itemDescription };
      console.log(
        "UpdatedInvoiceData: ",
        updatedInvoiceData,
        quantitiesArray,
        tempDictionary
      );
      value.setItemDetails(updatedInvoiceData);
      value.setItemDetailsInput({
        items: itemsArray,
        quantity: quantitiesArray,
        itemCost: itemCostArray,
      });

      // Use prevPoDetailsDataRef.current instead of value.poDetailsData
      const prevPoDetailsData = prevPoDetailsDataRef.current;

      // Only update poDetailsData if it has changed
      if (prevPoDetailsData?.length > 0) {
        // Identify new items not present in prevPoDetailsData
        const newItems = Object.keys(tempDictionary)
          .map((itemId) => ({
            itemId,
            itemQuantity: tempDictionary[itemId].itemCost,
            itemQuantity:tempDictionary[itemId].itemQuantity,
            itemDescription: tempDictionary[itemId].itemDescription,
          }));

        // Merge updates and new items
        value.setPurchaseItemDetails([...newItems]);
      }
    },
    [value.itemDetails, value.invoiceDatafromConversation] // Don't depend on poDetailsData anymore
  );